{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"names":["imgCss","Img","hostRef","ionImgWillLoad","ionImgDidLoad","ionError","onLoad","emit","onError","addIO","src","undefined","window","IntersectionObserverEntry","prototype","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","decoding","alt","part","style"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAMA,MAAM,GAAG,oMAAf;;AAEA,QAAMC,GAAG;AACL,mBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,qEAAiB,IAAjB,EAAuBA,OAAvB;AACA,aAAKC,cAAL,GAAsB,6DAAY,IAAZ,EAAkB,gBAAlB,EAAoC,CAApC,CAAtB;AACA,aAAKC,aAAL,GAAqB,6DAAY,IAAZ,EAAkB,eAAlB,EAAmC,CAAnC,CAArB;AACA,aAAKC,QAAL,GAAgB,6DAAY,IAAZ,EAAkB,UAAlB,EAA8B,CAA9B,CAAhB;;AACA,aAAKC,MAAL,GAAc,YAAM;AAChB,eAAI,CAACF,aAAL,CAAmBG,IAAnB;AACH,SAFD;;AAGA,aAAKC,OAAL,GAAe,YAAM;AACjB,eAAI,CAACH,QAAL,CAAcE,IAAd;AACH,SAFD;AAGH;;AAZI;AAAA;AAAA,qCAaQ;AACT,eAAKE,KAAL;AACH;AAfI;AAAA;AAAA,2CAgBc;AACf,eAAKA,KAAL;AACH;AAlBI;AAAA;AAAA,gCAmBG;AAAA;;AACJ,cAAI,KAAKC,GAAL,KAAaC,SAAjB,EAA4B;AACxB;AACH;;AACD,cAAI,OAAOC,MAAP,KAAkB,WAAlB,IACA,0BAA0BA,MAD1B,IAEA,+BAA+BA,MAF/B,IAGA,oBAAoBA,MAAM,CAACC,yBAAP,CAAiCC,SAHzD,EAGoE;AAChE,iBAAKC,QAAL;AACA,iBAAKC,EAAL,GAAU,IAAIC,oBAAJ,CAAyB,UAAAC,IAAI,EAAI;AACvC;AACA;AACA;AACA,kBAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,cAAZ,EAA4B;AACxB,sBAAI,CAACC,IAAL;;AACA,sBAAI,CAACL,QAAL;AACH;AACJ,aARS,CAAV;AASA,iBAAKC,EAAL,CAAQK,OAAR,CAAgB,KAAKC,EAArB;AACH,WAfD,MAgBK;AACD;AACAC,sBAAU,CAAC;AAAA,qBAAM,MAAI,CAACH,IAAL,EAAN;AAAA,aAAD,EAAoB,GAApB,CAAV;AACH;AACJ;AA3CI;AAAA;AAAA,+BA4CE;AACH,eAAKI,SAAL,GAAiB,KAAKhB,OAAtB;AACA,eAAKiB,OAAL,GAAe,KAAKf,GAApB;AACA,eAAKP,cAAL,CAAoBI,IAApB;AACH;AAhDI;AAAA;AAAA,mCAiDM;AACP,cAAI,KAAKS,EAAT,EAAa;AACT,iBAAKA,EAAL,CAAQU,UAAR;AACA,iBAAKV,EAAL,GAAUL,SAAV;AACH;AACJ;AAtDI;AAAA;AAAA,iCAuDI;AACL,iBAAQ,6DAAE,oDAAF,EAAQ;AAAE,qBAAO,oEAAW,IAAX;AAAT,WAAR,EAAqC,6DAAE,KAAF,EAAS;AAAEgB,oBAAQ,EAAE,OAAZ;AAAqBjB,eAAG,EAAE,KAAKe,OAA/B;AAAwCG,eAAG,EAAE,KAAKA,GAAlD;AAAuDtB,kBAAM,EAAE,KAAKA,MAApE;AAA4EE,mBAAO,EAAE,KAAKgB,SAA1F;AAAqGK,gBAAI,EAAE;AAA3G,WAAT,CAArC,CAAR;AACH;AAzDI;AAAA;AAAA,4BA0DI;AAAE,iBAAO,6DAAW,IAAX,CAAP;AAA0B;AA1DhC;AAAA;AAAA,4BA2DiB;AAAE,iBAAO;AAC3B,mBAAO,CAAC,YAAD;AADoB,WAAP;AAEpB;AA7DC;;AAAA;AAAA,OAAT;;AA+DA5B,OAAG,CAAC6B,KAAJ,GAAY9B,MAAZ","file":"13-es5.js","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-44bf8136.js';\r\nimport { b as getIonMode } from './ionic-global-837be8f3.js';\r\n\r\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\r\n\r\nconst Img = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\r\n        this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\r\n        this.ionError = createEvent(this, \"ionError\", 7);\r\n        this.onLoad = () => {\r\n            this.ionImgDidLoad.emit();\r\n        };\r\n        this.onError = () => {\r\n            this.ionError.emit();\r\n        };\r\n    }\r\n    srcChanged() {\r\n        this.addIO();\r\n    }\r\n    componentDidLoad() {\r\n        this.addIO();\r\n    }\r\n    addIO() {\r\n        if (this.src === undefined) {\r\n            return;\r\n        }\r\n        if (typeof window !== 'undefined' &&\r\n            'IntersectionObserver' in window &&\r\n            'IntersectionObserverEntry' in window &&\r\n            'isIntersecting' in window.IntersectionObserverEntry.prototype) {\r\n            this.removeIO();\r\n            this.io = new IntersectionObserver(data => {\r\n                // because there will only ever be one instance\r\n                // of the element we are observing\r\n                // we can just use data[0]\r\n                if (data[0].isIntersecting) {\r\n                    this.load();\r\n                    this.removeIO();\r\n                }\r\n            });\r\n            this.io.observe(this.el);\r\n        }\r\n        else {\r\n            // fall back to setTimeout for Safari and IE\r\n            setTimeout(() => this.load(), 200);\r\n        }\r\n    }\r\n    load() {\r\n        this.loadError = this.onError;\r\n        this.loadSrc = this.src;\r\n        this.ionImgWillLoad.emit();\r\n    }\r\n    removeIO() {\r\n        if (this.io) {\r\n            this.io.disconnect();\r\n            this.io = undefined;\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"src\": [\"srcChanged\"]\r\n    }; }\r\n};\r\nImg.style = imgCss;\r\n\r\nexport { Img as ion_img };\r\n"]}